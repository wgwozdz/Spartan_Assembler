// This program is designed to test every cpu op code.

// Display the test number in r4 on leds and halt.
failure:
	out r4, d0
	0

main:
	ldl failure, r5

test_00:
	ldl 0, r4
	out r4, d0
	ldl 37, r0
	ldl 37, r1
	cmp r0, r1
	jne r5

test_01:
	ldl 1, r4
        out r4, d0
	ldl 7, r0
	ldl 29, r1
	ldl 36, r3
	add r0, r1, r2
	cmp r2, r3
	jne r5

test_02:
	ldl 2, r4
        out r4, d0
        ldl 36, r0
        ldl 7, r1
        ldl 29, r3
        sub r0, r1, r2
        cmp r2, r3
        jne r5

test_03:
        ldl 3, r4
        out r4, d0
        ldl 36, r0
        ldl 37, r3
        inc r0
        cmp r0, r3
        jne r5

test_04:
        ldl 4, r4
        out r4, d0
        ldl 36, r0
        ldl 35, r3
        dec r0
        cmp r0, r3
        jne r5

test_06:
        ldl 6, r4
        out r4, d0
        ldl 36, r0
        ldl 7, r1
        ldl 252, r3
        mul r0, r1, r2
        cmp r2, r3
        jne r5

test_07:
        ldl 7, r4
        out r4, d0
        ldl 36, r0
        ldl 7, r1
        ldl 5, r3
        div r0, r1, r2
        cmp r2, r3
        jne r5

test_08:
        ldl 8, r4
        out r4, d0
        ldl 36, r0
        ldl 7, r1
        ldl 1, r3
        mod r0, r1, r2
        cmp r2, r3
        jne r5

test_09:
        ldl 9, r4
        out r4, d0
        ldl 8, r0
        ldl 2, r1
        ldl 2, r3
        shr r0, r1, r2
        cmp r2, r3
        jne r5

test_10:
        ldl 10, r4
        out r4, d0
        ldl 2, r0
        ldl 3, r1
        ldl 16, r3
        shl r0, r1, r2
        cmp r2, r3

test_11:
        ldl 11, r4
        out r4, d0
        ldl 5, r0
        ldl 6, r1
        ldl 4, r3
        and r0, r1, r2
        cmp r2, r3
        jne r5

test_12:
        ldl 12, r4
        out r4, d0
        ldl 5, r0
        ldl 6, r1
        ldl 7, r3
        or r0, r1, r2
        cmp r2, r3
        jne r5

test_13:
        ldl 13, r4
        out r4, d0
        ldl 5, r0
        ldl 6, r1
        ldl 3, r3
        xor r0, r1, r2
        cmp r2, r3
        jne r5

test_14:
        ldl 14, r4
        out r4, d0
        ldl 1267, r0
        ldl 64268, r3
        neg r0, r2
        cmp r2, r3
        jne r5

test_15:
        ldl 15, r4
        out r4, d0
        ldl 1267, r0
        ldl 1267, r3
        mov r0, r2
        cmp r2, r3
        jne r5

test_16:
	ldl 16, r4
        out r4, d0
	ldl 10, r0
	mov r15, r1
	push r0, r15
	inc r1
	cmp r1, r15
	jne r5
	dec r1
	ldm r1, r2
	cmp r0, r2
	jne r5

test_17:
        ldl 17, r4
        out r4, d0
        ldl 12, r0
        mov r15, r1
        push r0, r15
	pop r15, r2
	cmp r1, r15
	jne r5
	cmp r0, r2
	jne r5

test_18:
        ldl 18, r4
        out r4, d0
        ldl scratch, r0
        ldl 127, r3
        ldm r0, r2
        cmp r2, r3
        jne r5

test_19:
        ldl 19, r4
        out r4, d0
        ldl scratch, r0
        ldl 76, r3
	stm r3, r0
        ldm r0, r2
        cmp r2, r3
        jne r5

test_20:
        ldl 20, r4
        out r4, d0
        ldl 73, r0
        ldl 73, r3
	out r0, d0
	in d0, r2
	ldl 0, r0
	out r0, d0
        cmp r2, r3
        jne r5

test_21:
        ldl 21, r4
        out r4, d0
        ldl 5, r0
	cmp r0, r4
	setf r0
	jne r5 // set flags like cmp was equal

test_22:
        ldl 22, r4
        out r4, d0
        ldl 4, r0
	ldl 4, r3
        setf r0
	getf r2
	cmp r2, r3
        jne r5

test_23:
        ldl 23, r4
        out r4, d0
        ldl test_23b, r0
	ldl test_23a, r3
	cal r0, r2
test_23a:
	ja r5
test_23b:
        cmp r2, r3
        jne r5

success:
	ldl 255, r0
	out r0, d0
	0

scratch:
	127